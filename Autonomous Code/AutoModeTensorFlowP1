/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import android.util.Size;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.tfod.TfodProcessor;
import java.util.List;


@Autonomous(name="Robot: Auto TensorFlowP1", group="Robot")

public class AutoModeP1TensorFlow extends LinearOpMode {

    //Tensor flow variables
    private static final boolean USE_WEBCAM = true;  // true for webcam, false for phone camera

    private static final String TFOD_MODEL_ASSET = "MyModelStoredAsAsset.tflite";
    private static final String TFOD_MODEL_FILE = "/sdcard/FIRST/tflitemodels/myCustomModel.tflite";

    private static final String[] LABELS = {
            "1",
            "b",
    };


    private boolean isLeft = false;
    private boolean isMiddle = false;
    private boolean isRight = false;

    //Value that is either 1 or -1 depending on if it is blue prop or red
    private int colorPosFactor = 1;

    private int imageWidth = 1920;

    private TfodProcessor tfod;
    private VisionPortal visionPortal;

    /* Declare OpMode members. */
    private DcMotor         leftDriveBack   = null;
    private DcMotor         rightDriveBack  = null;
    private DcMotor         leftDriveFront   = null;
    private DcMotor         rightDriveFront  = null;
    private Servo LHand;

    private DcMotor armMotorL = null;
    private DcMotor armMotorR = null;

    private ElapsedTime     runtime = new ElapsedTime();

    // Calculate the COUNTS_PER_INCH for your specific drive train.
    // Go to your motor vendor website to determine your motor's COUNTS_PER_MOTOR_REV
    // For external drive gearing, set DRIVE_GEAR_REDUCTION as needed.
    // For example, use a value of 2.0 for a 12-tooth spur gear driving a 24-tooth spur gear.
    // This is gearing DOWN for less speed and more torque.
    // For gearing UP, use a gear ratio less than 1.0. Note this will affect the direction of wheel rotation.
    static final double     COUNTS_PER_MOTOR_REV    = 2800 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 2.95 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     DRIVE_SPEED             = 0.6;
    static final double     TURN_SPEED              = 0.5;


    @Override
    public void runOpMode() {
        initTfod();

        // Initialize the drive system variables.
        leftDriveBack  = hardwareMap.get(DcMotor.class, "BLeft");
        rightDriveBack = hardwareMap.get(DcMotor.class, "BRight");
        leftDriveFront  = hardwareMap.get(DcMotor.class, "FLeft");
        rightDriveFront = hardwareMap.get(DcMotor.class, "FRight");
        LHand = hardwareMap.get(Servo.class, "LHand");
        LHand.setPosition(0.4);

        armMotorL = hardwareMap.get(DcMotor.class, "LArm");
        armMotorR = hardwareMap.get(DcMotor.class, "RArm");

        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // When run, this OpMode should start both motors driving forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        leftDriveBack.setDirection(DcMotor.Direction.REVERSE);
        rightDriveBack.setDirection(DcMotor.Direction.FORWARD);
        leftDriveFront.setDirection(DcMotor.Direction.REVERSE);
        rightDriveFront.setDirection(DcMotor.Direction.FORWARD);

        leftDriveBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightDriveBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftDriveFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightDriveFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        leftDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Send telemetry message to indicate successful Encoder reset
        telemetry.addData("Starting at",  "%7d :%7d :%7d :%7d",
                leftDriveBack.getCurrentPosition(),
                rightDriveBack.getCurrentPosition(),
                leftDriveFront.getCurrentPosition(),
                rightDriveFront.getCurrentPosition());
        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // Step through each leg of the path,
        // Note: Reverse movement is obtained by setting a negative distance (not speed)

        if(isLeft){


        } else if (isMiddle) {
            encoderDrive(DRIVE_SPEED,  -30, -30,  -30, -30,  1.15);
            armMotorR.setPower(-0.4);
            armMotorL.setPower(-0.4);
            sleep(100);
            encoderDrive(DRIVE_SPEED, 25, 25, 25, 25, 1.05);
            armMotorR.setPower(0);
            armMotorL.setPower(0);
            encoderDrive(TURN_SPEED,   (15 * colorPosFactor), (15 * colorPosFactor), ((-15) * colorPosFactor), ((-15) * colorPosFactor),  1.03);
            encoderDrive(DRIVE_SPEED, -40, -40, -40, -40, 1.7);
            armMotorR.setPower(0);
            armMotorL.setPower(0);
            LHand.setPosition(0.3);

        } else if (isRight){


        }


        leftDriveBack.setPower(0);
        leftDriveFront.setPower(0);
        rightDriveBack.setPower(0);
        rightDriveFront.setPower(0);
        telemetry.addData("Path", "Complete");
        telemetry.update();
        sleep(1000);  // pause to display final telemetry message.
    }

    /*
     *  Method to perform a relative move, based on encoder counts.
     *  Encoders are not reset as the move is based on the current position.
     *  Move will stop if any of three conditions occur:
     *  1) Move gets to the desired position
     *  2) Move runs out of time
     *  3) Driver stops the OpMode running.
     */

    private void initTfod() {

        // Create the TensorFlow processor by using a builder.
        tfod = new TfodProcessor.Builder()

                // With the following lines commented out, the default TfodProcessor Builder
                // will load the default model for the season. To define a custom model to load,
                // choose one of the following:
                //   Use setModelAssetName() if the custom TF Model is built in as an asset (AS only).
                //   Use setModelFileName() if you have downloaded a custom team model to the Robot Controller.
                //.setModelAssetName(TFOD_MODEL_ASSET)
                //.setModelFileName(TFOD_MODEL_FILE)

                // The following default settings are available to un-comment and edit as needed to
                // set parameters for custom models.
                //.setModelLabels(LABELS)
                //.setIsModelTensorFlow2(true)
                //.setIsModelQuantized(true)
                //.setModelInputSize(300)
                .setModelAspectRatio(16.0 / 9.0)

                .build();

        // Create the vision portal by using a builder.
        VisionPortal.Builder builder = new VisionPortal.Builder();

        // Set the camera (webcam vs. built-in RC phone camera).
        if (USE_WEBCAM) {
            builder.setCamera(hardwareMap.get(WebcamName.class, "Webcam 1"));
        } else {
            builder.setCamera(BuiltinCameraDirection.BACK);
        }

        // Choose a camera resolution. Not all cameras support all resolutions.
        builder.setCameraResolution(new Size(1920, 1080));

        // Enable the RC preview (LiveView).  Set "false" to omit camera monitoring.
        //builder.enableLiveView(true);

        // Set the stream format; MJPEG uses less bandwidth than default YUY2.
        //builder.setStreamFormat(VisionPortal.StreamFormat.YUY2);

        // Choose whether or not LiveView stops if no processors are enabled.
        // If set "true", monitor shows solid orange screen if no processors enabled.
        // If set "false", monitor shows camera view without annotations.
        //builder.setAutoStopLiveView(false);

        // Set and enable the processor.
        builder.addProcessor(tfod);

        // Build the Vision Portal, using the above settings.
        visionPortal = builder.build();

        // Set confidence threshold for TFOD recognitions, at any time.
        //tfod.setMinResultConfidence(0.75f);

        // Disable or re-enable the TFOD processor at any time.
        //visionPortal.setProcessorEnabled(tfod, true);

    }   // end method initTfod()

    public void tfodDetection(){
        List<Recognition> currentRecognitions = tfod.getRecognitions();
        telemetry.addData("# Objects detected", currentRecognitions.size());

        for (Recognition recognition : currentRecognitions) {
            float propCenterX = (recognition.getLeft() + recognition.getRight()) / 2;

            int sectionWidth = imageWidth / 3;
            int leftBoundary = 0;
            int middleBoundary = sectionWidth;
            int rightBoundary = sectionWidth * 2;

            // Recognize if it is the blue or red prop
            if (recognition.getLabel().equals(LABELS[0])) {
                colorPosFactor = -1;
            } else if (recognition.getLabel().equals(LABELS[1])) {
                colorPosFactor = 1;
            }

            //Find out what tape the prop is on
            if (propCenterX < middleBoundary) {
                // Object is in left side
                isLeft = true;
            } else if (propCenterX > leftBoundary && propCenterX < rightBoundary) {
                // Object is in the middle
                isMiddle = true;
            } else {
                // Object is in right
                isRight = true;
            }


        }
    }
    public void encoderDrive(double speed,
                             double leftInchesBack, double leftInchesFront, double rightInchesBack, double rightInchesFront,
                             double timeoutS) {
        int newLeftBackTarget;
        int newRightBackTarget;
        int newLeftFrontTarget;
        int newRightFrontTarget;

        // Ensure that the OpMode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            newLeftBackTarget = leftDriveBack.getCurrentPosition() + (int)(leftInchesBack * COUNTS_PER_INCH);
            newRightBackTarget = rightDriveBack.getCurrentPosition() + (int)(rightInchesBack * COUNTS_PER_INCH);
            newLeftFrontTarget = leftDriveFront.getCurrentPosition() + (int)(leftInchesFront * COUNTS_PER_INCH);
            newRightFrontTarget = rightDriveFront.getCurrentPosition() + (int)(rightInchesFront * COUNTS_PER_INCH);

            leftDriveBack.setTargetPosition(newLeftBackTarget);
            rightDriveBack.setTargetPosition(newRightBackTarget);
            leftDriveFront.setTargetPosition(newLeftFrontTarget);
            rightDriveFront.setTargetPosition(newRightFrontTarget);

            // Turn On RUN_TO_POSITION
            leftDriveBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightDriveBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            leftDriveFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightDriveFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            leftDriveBack.setPower(Math.abs(speed));
            rightDriveBack.setPower(Math.abs(speed));
            leftDriveFront.setPower(Math.abs(speed));
            rightDriveFront.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() && (runtime.seconds() < timeoutS) && (leftDriveBack.isBusy() && rightDriveBack.isBusy() && leftDriveFront.isBusy() && rightDriveFront.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Running to",  " %7d :%7d :%7d :%7d", newLeftBackTarget,  newRightBackTarget, newLeftFrontTarget, newRightFrontTarget);
                telemetry.addData("Currently at",  " at %7d :%7d :%7d :%7d",
                        leftDriveBack.getCurrentPosition(), rightDriveBack.getCurrentPosition(), leftDriveFront.getCurrentPosition(), rightDriveFront.getCurrentPosition());
                telemetry.update();
            }

            //Stop all motion
            leftDriveBack.setPower(0);
            rightDriveBack.setPower(0);
            leftDriveFront.setPower(0);
            rightDriveFront.setPower(0);

            // Turn off RUN_TO_POSITION
            leftDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            sleep(250);   // optional pause after each move.
        }
    }
}
