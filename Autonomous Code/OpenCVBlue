package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.teamcode.Vision.BluePropDetector;
import org.firstinspires.ftc.teamcode.Vision.testBluePipeline;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvWebcam;
//import org.firstinspires.ftc.robotcore.external.Telemetry;
@Autonomous(name="Robot: OpenCVAutonomous P1 Blue", group ="Robot")
public class OpenCVBlueAutonomousP1 extends LinearOpMode{
    private DcMotor leftDriveBack   = null;
    private DcMotor         rightDriveBack  = null;
    private DcMotor         leftDriveFront   = null;
    private DcMotor         rightDriveFront  = null;
    private Servo LHand;

    private DcMotor armMotorL = null;
    private DcMotor armMotorR = null;

    private ElapsedTime runtime = new ElapsedTime();

    // Calculate the COUNTS_PER_INCH for your specific drive train.
    // Go to your motor vendor website to determine your motor's COUNTS_PER_MOTOR_REV
    // For external drive gearing, set DRIVE_GEAR_REDUCTION as needed.
    // For example, use a value of 2.0 for a 12-tooth spur gear driving a 24-tooth spur gear.
    // This is gearing DOWN for less speed and more torque.
    // For gearing UP, use a gear ratio less than 1.0. Note this will affect the direction of wheel rotation.
    static final double     COUNTS_PER_MOTOR_REV    = 2800 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 2.95 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     DRIVE_SPEED             = 0.6;
    static final double     TURN_SPEED              = 0.5;


    testBluePipeline pipeline = new testBluePipeline(telemetry);
    OpenCvWebcam webcam;
    @Override
    public void runOpMode() throws InterruptedException {

        // Initialize the drive system variables.
        leftDriveBack  = hardwareMap.get(DcMotor.class, "BLeft");
        rightDriveBack = hardwareMap.get(DcMotor.class, "BRight");
        leftDriveFront  = hardwareMap.get(DcMotor.class, "FLeft");
        rightDriveFront = hardwareMap.get(DcMotor.class, "FRight");
        LHand = hardwareMap.get(Servo.class, "LHand");
        LHand.setPosition(0.4);

        armMotorL = hardwareMap.get(DcMotor.class, "LArm");
        armMotorR = hardwareMap.get(DcMotor.class, "RArm");

        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // When run, this OpMode should start both motors driving forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        leftDriveBack.setDirection(DcMotor.Direction.REVERSE);
        rightDriveBack.setDirection(DcMotor.Direction.FORWARD);
        leftDriveFront.setDirection(DcMotor.Direction.REVERSE);
        rightDriveFront.setDirection(DcMotor.Direction.FORWARD);

        leftDriveBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightDriveBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftDriveFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightDriveFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        leftDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


        /*int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());

        webcam = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);

        webcam.setMillisecondsPermissionTimeout(5000);

        //set our blue pipeline
        webcam.setPipeline(new testBluePipeline(telemetry));

        webcam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener() {
            @Override
            public void onOpened() {
                // Tell webcam to start streaming
                webcam.startStreaming(1920, 1080, OpenCvCameraRotation.UPRIGHT);
            }

            @Override
            public void onError(int errorCode) {

            }
        });



        waitForStart();
        String result = pipeline.propPosition();
        webcam.stopStreaming();
        webcam.closeCameraDevice();*/


        String result = "left";
        waitForStart();

        if(result.equals("left")){
            // Move forward
            encoderDrive(DRIVE_SPEED,  -15, -15,  -15, -15,  0.75);
            //Turn to tape
            encoderDrive(TURN_SPEED, 15, 15, -15, -15, 1.03);
            // Move forward and place pixel
            encoderDrive(DRIVE_SPEED, -15, -15, -15, -15, 0.50);
            armMotorR.setPower(-0.4);
            armMotorL.setPower(-0.4);
            //Move back
            sleep(100);
            encoderDrive(DRIVE_SPEED, 15, 15, 15,15, 0.50);

            //Turn back to original rotation
            encoderDrive(TURN_SPEED, -15, -15, 15, 15, 1.03);

            //Move back to original position
            encoderDrive(DRIVE_SPEED, 15, 15, 15, 15, 0.75);

            //Turn towards parking area
            encoderDrive(TURN_SPEED,   (15), (15), ((-15)), ((-15)),  1.03);

            //Drive forward and park
            encoderDrive(DRIVE_SPEED, -40, -40, -40, -40, 1.2);

            armMotorR.setPower(0);
            armMotorL.setPower(0);
            LHand.setPosition(0.3);

        } else if (result.equals("middle")) {
            encoderDrive(DRIVE_SPEED,  -30, -30,  -30, -30,  1.15);
            armMotorR.setPower(-0.4);
            armMotorL.setPower(-0.4);
            sleep(100);
            encoderDrive(DRIVE_SPEED, 25, 25, 25, 25, 1.05);
            armMotorR.setPower(0);
            armMotorL.setPower(0);
            encoderDrive(TURN_SPEED,   (15), (15), ((-15)), ((-15)),  1.03);
            encoderDrive(DRIVE_SPEED, -40, -40, -40, -40, 1.7);
            armMotorR.setPower(0);
            armMotorL.setPower(0);
            LHand.setPosition(0.3);

        } else if (result.equals("right")){
            // Move forward
            encoderDrive(DRIVE_SPEED,  -15, -15,  -15, -15,  0.75);
            //Turn to tape
            encoderDrive(TURN_SPEED, -15, -15, 15, 15, 1.03);
            // Move forward and place pixel
            encoderDrive(DRIVE_SPEED, -15, -15, -15, -15, 0.50);
            armMotorR.setPower(-0.4);
            armMotorL.setPower(-0.4);
            //Move back
            sleep(100);
            encoderDrive(DRIVE_SPEED, 15, 15, 15,15, 0.50);

            //Turn back to original rotation
            encoderDrive(TURN_SPEED, 15, 15, -15, -15, 1.03);

            //Move back to original position
            encoderDrive(DRIVE_SPEED, 15, 15, 15, 15, 0.75);

            //Turn towards parking area
            encoderDrive(TURN_SPEED,   (15), (15), ((-15)), ((-15)),  1.03);

            //Drive forward and park
            encoderDrive(DRIVE_SPEED, -40, -40, -40, -40, 1.2);

            armMotorR.setPower(0);
            armMotorL.setPower(0);
            LHand.setPosition(0.3);
        }

        leftDriveBack.setPower(0);
        leftDriveFront.setPower(0);
        rightDriveBack.setPower(0);
        rightDriveFront.setPower(0);


    }


    public void encoderDrive(double speed,
                             double leftInchesBack, double leftInchesFront, double rightInchesBack, double rightInchesFront,
                             double timeoutS) {
        int newLeftBackTarget;
        int newRightBackTarget;
        int newLeftFrontTarget;
        int newRightFrontTarget;

        // Ensure that the OpMode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            newLeftBackTarget = leftDriveBack.getCurrentPosition() + (int)(leftInchesBack * COUNTS_PER_INCH);
            newRightBackTarget = rightDriveBack.getCurrentPosition() + (int)(rightInchesBack * COUNTS_PER_INCH);
            newLeftFrontTarget = leftDriveFront.getCurrentPosition() + (int)(leftInchesFront * COUNTS_PER_INCH);
            newRightFrontTarget = rightDriveFront.getCurrentPosition() + (int)(rightInchesFront * COUNTS_PER_INCH);

            leftDriveBack.setTargetPosition(newLeftBackTarget);
            rightDriveBack.setTargetPosition(newRightBackTarget);
            leftDriveFront.setTargetPosition(newLeftFrontTarget);
            rightDriveFront.setTargetPosition(newRightFrontTarget);

            // Turn On RUN_TO_POSITION
            leftDriveBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightDriveBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            leftDriveFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightDriveFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            leftDriveBack.setPower(Math.abs(speed));
            rightDriveBack.setPower(Math.abs(speed));
            leftDriveFront.setPower(Math.abs(speed));
            rightDriveFront.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() && (runtime.seconds() < timeoutS) && (leftDriveBack.isBusy() && rightDriveBack.isBusy() && leftDriveFront.isBusy() && rightDriveFront.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Running to",  " %7d :%7d :%7d :%7d", newLeftBackTarget,  newRightBackTarget, newLeftFrontTarget, newRightFrontTarget);
                telemetry.addData("Currently at",  " at %7d :%7d :%7d :%7d",
                        leftDriveBack.getCurrentPosition(), rightDriveBack.getCurrentPosition(), leftDriveFront.getCurrentPosition(), rightDriveFront.getCurrentPosition());
                telemetry.update();
            }

            //Stop all motion
            leftDriveBack.setPower(0);
            rightDriveBack.setPower(0);
            leftDriveFront.setPower(0);
            rightDriveFront.setPower(0);

            // Turn off RUN_TO_POSITION
            leftDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightDriveBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightDriveFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            sleep(250);   // optional pause after each move.
        }
    }
}
