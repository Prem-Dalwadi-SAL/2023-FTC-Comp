package org.firstinspires.ftc.teamcode.Vision;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;
import org.openftc.easyopencv.OpenCvPipeline;


import java.util.ArrayList;
import java.util.List;

public class testBluePipeline extends OpenCvPipeline {

    public Telemetry telemetry = null;
    public String result = "";

    public testBluePipeline(Telemetry telemetry){this.telemetry = telemetry;}

    Mat hsv;
    Mat mask;
    Mat kernal;
    Mat output;


    @Override
    public Mat processFrame(Mat input){
        hsv = new Mat();
        Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);

        Scalar lowerBlue = new Scalar(90, 100, 100);
        Scalar upperBlue = new Scalar(120, 255, 255);

        mask = new Mat();
        Core.inRange(hsv, lowerBlue, upperBlue, mask);

        kernal = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(5, 5));
        Imgproc.morphologyEx(mask, mask, Imgproc.MORPH_OPEN, kernal);
        Imgproc.morphologyEx(mask, mask, Imgproc.MORPH_CLOSE, kernal);

        //Find contours
        List<MatOfPoint> contours = new ArrayList<>();
        Imgproc.findContours(mask, contours, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        //Find the largest contour
        double maxArea = 0;
        MatOfPoint largestContour = new MatOfPoint();
        for (MatOfPoint contour: contours){
            double area = Imgproc.contourArea(contour);
            if(area > maxArea){
                maxArea = area;
                largestContour = contour;
            }
        }

        output = new Mat();
        input.copyTo(output, mask);

        //Draw the largest contour
        if(largestContour != null){
            Imgproc.drawContours(output, contours, contours.indexOf(largestContour), new Scalar(255, 0, 0), 2);
        }

        drawSections(output);
        Point centroid = getCentroid(largestContour);
        result = getPropPosition(centroid, 1920);
        telemetry.addData("Result", result);
        telemetry.addData("Centroid", centroid);
        telemetry.update();

        hsv.release();
        mask.release();
        //kernal.release();
        //output.release();
        //input.release();

        return output;
    }

    private Point getCentroid(MatOfPoint contour){
        Moments moments = Imgproc.moments(contour);
        double cX = moments.m10 / moments.m00;
        double cY = moments.m01 / moments.m00;
        return new Point(cX, cY);
    }

    private void drawSections(Mat image){
        int width = image.cols();
        int sectionWidth = width / 3;

        //Draw lines
        Imgproc.line(image, new Point(sectionWidth, 0), new Point(sectionWidth, image.rows()), new Scalar(255, 0, 0), 2);
        Imgproc.line(image, new Point(sectionWidth * 2, 0), new Point(sectionWidth * 2, image.rows()), new Scalar(255, 0, 0), 2);
    }

    public String getPropPosition(Point centroid, int imageWidth){
        int sectionWidth = imageWidth / 3;
        int leftBound = 0;
        int middleBound = sectionWidth;
        int rightBound = sectionWidth * 2;

        if (centroid.x < middleBound){
            // Prop is on left
            return "left";

        } else if (centroid.x > middleBound && centroid.x < rightBound) {
            // Prop is in middle
            return "middle";
        }else {
            // Prop is on right
            return "right";
        }


    }

    public String propPosition(){
        return this.result;
    }
}
